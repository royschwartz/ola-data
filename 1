import os
import math
import glob
from copy import deepcopy
import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from matplotlib import style
plt.style.use('ggplot')
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# df = pd.read_csv("/Users/shellyganga/Downloads/ola_results.csv", low_memory=False, encoding = 'utf_8')
#
# df['starting'] = pd.to_datetime(df['Start_Date'] + ' ' + df['Start_Time'])
# df['ending'] = pd.to_datetime(df['Stop_Date'] + ' ' + df['Stop_Time'])



df = pd.read_pickle("/Users/shellyganga/Downloads/timeadd")

df2 = df.ending - df.starting

df2 = df2 / np.timedelta64(1, 's') / 60

df['diff'] = df2

# df2 = df['diff'].astype(object).where(df['diff'].notnull(), np.random.rand(10, 1))

df['diff'] = df2





# df['ans'] = df['diff'].apply(lambda x: x  / np.timedelta64(1,'m')).astype('int64') % (24*60)




header_list = ['ola_score', 'unsafe', 'unprofessional', 'untrained', 'smooth', 'turning']

newdf = df.loc[df.ola_score.dropna().index]

targetdf = newdf.reindex(columns = header_list)

targetdf[['unsafe', 'unprofessional', 'untrained']] = 0




target_pos = 0

for index, row in newdf.iterrows():
    ola_comments = row['OLA_COMMENTS']
    if type(ola_comments) == float:
        target_pos += 1
        continue
    # update the necessary colums
    if ola_comments.find("Unsafe") != -1:
        targetdf.unsafe.iloc[target_pos] = 1
    if ola_comments.find("Unprofessional") != -1:
        targetdf.unprofessional.iloc[target_pos] = 1
    if ola_comments.find("Untrained") != -1:
        targetdf.untrained.iloc[target_pos] = 1

    target_pos += 1

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

f1 = targetdf.ola_score.values
f2 = targetdf.unsafe.values
f3 = targetdf.untrained.values


ax.scatter(f1, f2, f3, c='r', marker='o')

plt.scatter(f1, f2, f3)
plt.show()

X=np.matrix(list(zip(f1,f2, f3)))
print(X)
kmeans = KMeans(n_clusters=2).fit(X)






df2 = newdf[newdf.OLA_COMMENTS.str.contains("Unsafe", na = False)]


#print(df2)

# for index, row in newdf.iterrows:
#     if newdf[newdf['OLA_COMMENTS'].str.contains("Unsafe", na=False)] == True:
#         print('I')

# for index, row in df.iterrows():
#
#     x = float(df['ola_score'][index])
#
#     if math.isnan(x) or df['ola_score'][index] == 'NA':
#         continue
#
#     targetdf['ola_score'][target_df_index] = x
#
#     target_df_index += 1





#
#
# def search_thru(target_string, dest_column):
#
# for index, row in df.iterrows():






# for index, row in fs.iterrows():
#     if fs.ola_score() == 'nan'
#         continue






# for i in fs:
#     if fs['ola score'] = ('nan')
#         fs.next()
#         continue:
#
#
#print(header_list)
